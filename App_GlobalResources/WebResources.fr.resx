<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Address" xml:space="preserve">
    <value>Adresse :</value>
  </data>
  <data name="Amount" xml:space="preserve">
    <value>Montant :</value>
  </data>
  <data name="BuyerData" xml:space="preserve">
    <value>Vos coordonnées</value>
  </data>
  <data name="CancelMsg" xml:space="preserve">
    <value>Le paiement a été annulé par l'acheteur.</value>
  </data>
  <data name="CheckoutConfirmTitle" xml:space="preserve">
    <value>Formulaire de paiement - Confirmation de la commande</value>
  </data>
  <data name="CheckoutTitle" xml:space="preserve">
    <value>Formulaire de paiement - Données de la commande</value>
  </data>
  <data name="City" xml:space="preserve">
    <value>Ville :</value>
  </data>
  <data name="Civility" xml:space="preserve">
    <value>Civilité :</value>
  </data>
  <data name="CivilityMr" xml:space="preserve">
    <value>M.</value>
  </data>
  <data name="CivilityMrs" xml:space="preserve">
    <value>Mme</value>
  </data>
  <data name="CivilityMs" xml:space="preserve">
    <value>Mlle</value>
  </data>
  <data name="ConfigErrorMessage" xml:space="preserve">
    <value>Avant de commencer, assurez-vous d'avoir modifié l'identifiant de la boutique ainsi que les clés dans le fichier Web.config.</value>
  </data>
  <data name="ConfirmDescription1" xml:space="preserve">
    <value>En cliquant sur le bouton ci-dessus, le codebehind va récupérer les valeurs saisies sur la page précédente. Ces valeurs ainsi que les variables de configuration seront stockées dans un SortedDictionary afin d'être classées par ordre alphabétique.</value>
  </data>
  <data name="ConfirmDescription2" xml:space="preserve">
    <value>Le calcul de signature est réalisé par l'appel de la fonction GetSignature() présente dans le fichier API PaymentUtils.cs.</value>
  </data>
  <data name="ConfirmDescription3" xml:space="preserve">
    <value>Les valeurs seront ensuite postées à la plateforme de paiement en appelant la fonction GetPaymentForm().</value>
  </data>
  <data name="ConfirmDescription4" xml:space="preserve">
    <value>Après le paiement vous serez redirigé vers la page PaymentResult.aspx.</value>
  </data>
  <data name="Country" xml:space="preserve">
    <value>Pays :</value>
  </data>
  <data name="CountryDE" xml:space="preserve">
    <value>Allemagne</value>
  </data>
  <data name="CountryES" xml:space="preserve">
    <value>Espagne</value>
  </data>
  <data name="CountryFR" xml:space="preserve">
    <value>France</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>E-mail :</value>
  </data>
  <data name="FailureMsg" xml:space="preserve">
    <value>Votre paiement n'a pas été accepté. Veuillez repasser votre commande.</value>
  </data>
  <data name="FatalErrorMsg" xml:space="preserve">
    <value>Une erreur est survenue dans le processus de paiement.</value>
  </data>
  <data name="FirstName" xml:space="preserve">
    <value>Nom :</value>
  </data>
  <data name="InvalidField" xml:space="preserve">
    <value>Champ invalide !</value>
  </data>
  <data name="LastName" xml:space="preserve">
    <value>Prénom :</value>
  </data>
  <data name="OrderData" xml:space="preserve">
    <value>Informations sur la commande</value>
  </data>
  <data name="OrderNumber" xml:space="preserve">
    <value>Numéro de commande :</value>
  </data>
  <data name="Payment" xml:space="preserve">
    <value>Paiement par carte bancaire</value>
  </data>
  <data name="PaymentResultTitle" xml:space="preserve">
    <value>Formulaire de paiement - Résultat du paiement</value>
  </data>
  <data name="PendingMsg" xml:space="preserve">
    <value>Votre commande est en cours de traitement.</value>
  </data>
  <data name="Phone" xml:space="preserve">
    <value>Téléphone :</value>
  </data>
  <data name="ResponseContent" xml:space="preserve">
    <value>Contenu de la réponse</value>
  </data>
  <data name="SignatureProcessing" xml:space="preserve">
    <value>Calcul de la signature</value>
  </data>
  <data name="SiteHeader" xml:space="preserve">
    <value>Exemple de formulaire de paiement en ASP.NET</value>
  </data>
  <data name="SiteTitle" xml:space="preserve">
    <value>Formulaire de paiement</value>
  </data>
  <data name="SuccessMsg" xml:space="preserve">
    <value>Votre commande a bien été reçue. Merci de votre achat !</value>
  </data>
  <data name="ValidateDescription" xml:space="preserve">
    <value>Les informations saisies sur cette page seront envoyées en POST à la page suivante.</value>
  </data>
  <data name="ValidateOrder" xml:space="preserve">
    <value>Valider la commande</value>
  </data>
  <data name="ZipCode" xml:space="preserve">
    <value>Code postal :</value>
  </data>
</root>